{"version":3,"sources":["helpers/api.ts","components/Loading/Loading.tsx","components/User/User.tsx","helpers/capitalize.ts","components/Comments/Comments.tsx","components/CommentList/CommentList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostList.tsx","components/Button/Button.tsx","App.tsx","helpers/debounce.ts","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","posts","users","comments","preparedPosts","map","post","user","find","id","userId","filter","comment","postId","Loading","isLoaded","errorMessage","className","User","name","email","address","href","city","street","zipcode","capitalize","str","toUpperCase","slice","Comments","body","CommentList","key","PostItem","title","PostList","Button","handleOnClick","text","type","onClick","App","useState","isToggle","setIsToggle","setPosts","setIsLoaded","query","setQuery","filterQuery","setFilterQuery","setErrorMessage","loadPosts","then","postsFromServer","catch","setFilterQueryWithDebounce","useCallback","f","delay","timerId","value","clearTimeout","setTimeout","debounce","visiblePosts","useMemo","toLowerCase","includes","htmlFor","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cd814c3.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nasync function getData(url: string) {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import React from 'react';\nimport './Loading.css';\n\ntype Props = {\n  isLoaded: boolean;\n  errorMessage: string;\n};\n\nconst Loading: React.FC<Props> = ({ isLoaded, errorMessage }) => (\n  <div className={(isLoaded || errorMessage !== '') ? '' : 'lds-roller'}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  name: string;\n  email: string;\n  address: Address;\n};\n\nconst User: React.FC<Props> = ({ name, email, address }) => (\n  <>\n    <div className=\"author\">\n      <p>\n        {' '}\n        <span className=\"author__title\">Author: </span>\n        {name}\n      </p>\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n      <p className=\"author__address\">\n        <div>\n          {address.city}\n          ,\n        </div>\n        <div>\n          {address.street}\n          ,\n        </div>\n        <div>{address.zipcode}</div>\n      </p>\n    </div>\n  </>\n);\n\nexport default User;\n","export const capitalize = (str: string) => (\n  str[0].toUpperCase() + str.slice(1)\n);\n","import React from 'react';\nimport './Comments.css';\nimport { capitalize } from '../../helpers/capitalize';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst Comments: React.FC<Props> = ({ name, email, body }) => (\n  <div className=\"comments__item\">\n    <p className=\"author\">\n      {capitalize(name)}\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n    </p>\n    <p>\n      {capitalize(body)}\n    </p>\n  </div>\n);\n\nexport default Comments;\n","import React from 'react';\nimport Comment from '../Comments/Comments';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport './PostItem.css';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport { capitalize } from '../../helpers/capitalize';\n\ntype Props = {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n};\n\nconst PostItem: React.FC<Props> = ({\n  title, body, user, comments,\n}) => (\n  <section className=\"post\">\n\n    <h2 className=\"post__title\">\n      {capitalize(title)}\n    </h2>\n\n    <User {...user} />\n\n    <article className=\"post__text\">\n      {capitalize(body)}\n    </article>\n\n    <CommentList comments={comments} />\n  </section>\n\n);\n\nexport default PostItem;\n","import React from 'react';\nimport './PostList.css';\nimport PostItem from '../PostItem/PostItem';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"container\">\n    {posts.map((post: PreparedPost) => (\n      <PostItem {...post} key={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React from 'react';\nimport './Button.css';\n\ntype Props = {\n  handleOnClick: () => void;\n  text: string;\n};\n\nconst Button: React.FC<Props> = ({ handleOnClick, text }) => (\n  <button\n    type=\"button\"\n    className=\"button\"\n    onClick={handleOnClick}\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","import React, {\n  useState, ChangeEvent, useCallback, useMemo,\n} from 'react';\nimport { getPreparedPosts } from './helpers/api';\nimport { debounce } from './helpers/debounce';\nimport './App.css';\nimport Loading from './components/Loading/Loading';\nimport PostList from './components/PostList/PostList';\nimport Button from './components/Button/Button';\n\nconst App = () => {\n  const [isToggle, setIsToggle] = useState(false);\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const loadPosts = () => {\n    setIsToggle(!isToggle);\n    getPreparedPosts()\n      .then((postsFromServer: PreparedPost[]) => {\n        setPosts(postsFromServer);\n        setIsLoaded(true);\n      })\n      .catch(() => (\n        setErrorMessage('Oops! Something went wrong... :(')\n      ));\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 500), [],\n  );\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  const visiblePosts = useMemo(\n    () => posts.filter(({ title, body }) => (\n      (title + body).toLowerCase().includes(filterQuery.toLowerCase())\n    )),\n    [filterQuery, posts],\n  );\n\n  return (\n    <div className=\"container-header\">\n      <h1>Dynamic list of posts</h1>\n\n      {(!isToggle && !errorMessage)\n        ? (\n          <Button\n            handleOnClick={loadPosts}\n            text=\"Load\"\n          />\n        )\n        : (\n          <Loading\n            isLoaded={isLoaded}\n            errorMessage={errorMessage}\n          />\n        )}\n\n      {isLoaded\n        && (\n          <>\n            <label\n              htmlFor=\"inputFilter\"\n              className=\"label\"\n            >\n              Filter field\n              <input\n                type=\"text\"\n                id=\"inputFilter\"\n                className=\"inputFilter\"\n                value={query}\n                onChange={handleOnChange}\n              />\n            </label>\n\n            <PostList posts={visiblePosts} />\n          </>\n        )}\n      {errorMessage\n      && (\n        <div className=\"is-error\">\n          <p className=\"is-error__text\">\n            {errorMessage}\n          </p>\n          <Button\n            handleOnClick={loadPosts}\n            text=\"Try again\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const debounce = (f: React.Dispatch<React.SetStateAction<string>>, delay: number) => {\n  let timerId: ReturnType<typeof setTimeout>;\n\n  return (value: string) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      f(value);\n    }, delay);\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
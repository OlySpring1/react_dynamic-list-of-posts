{"version":3,"sources":["helpers/api.ts","components/Loading/Loading.tsx","components/User/User.tsx","components/Comments/Comments.tsx","components/CommentList/CommentList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostList.tsx","App.tsx","helpers/debounce.ts","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","getPreparedPosts","Promise","all","posts","users","comments","preparedPosts","map","post","user","find","id","userId","filter","comment","postId","Loading","isLoaded","className","User","name","email","href","Comments","body","toUpperCase","slice","CommentList","key","PostItem","title","PostList","App","useState","isToggle","setIsToggle","setPosts","setIsLoaded","query","setQuery","filterQuery","setFilterQuery","setFilterQueryWithDebounce","useCallback","f","delay","timerId","value","clearTimeout","setTimeout","debounce","visiblePosts","toLowerCase","includes","type","onClick","then","postsFromServer","htmlFor","onChange","e","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18cf998e.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nasync function getData(url: string) {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n}\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import React from 'react';\nimport './Loading.css';\n// import classNames from 'classnames/bind';\n\ntype Props = {\n  isLoaded: boolean;\n};\n\nconst Loading: React.FC<Props> = ({ isLoaded }) => (\n  <div className={isLoaded ? 'has-background-success' : 'lds-roller'}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport './User.css';\n\ntype Props = {\n  name: string;\n  email: string;\n  // address: Address;\n};\n\nconst User: React.FC<Props> = ({ name, email }) => (\n  <>\n    <div className=\"author\">\n      <p>\n        {' '}\n        <span className=\"author__title\">Author: </span>\n        {name}\n      </p>\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n      {/* <p className=\"author__address\">\n        <div>\n          {address.city}\n          ,\n        </div>\n        <div>\n          {address.street}\n          ,\n        </div>\n        <div>{address.zipcode}</div>\n      </p> */}\n    </div>\n  </>\n);\n\nexport default User;\n","import React from 'react';\nimport './Comments.css';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n};\n\nconst Comments: React.FC<Props> = ({ name, email, body }) => (\n  <div className=\"comments__item\">\n    <p className=\"author\">\n      {name[0].toUpperCase() + name.slice(1)}\n      <a href=\"mailto:example@gmail.com\" className=\"author__email\">{email}</a>\n    </p>\n    <p>\n      {body[0].toUpperCase() + body.slice(1)}\n    </p>\n  </div>\n);\n\nexport default Comments;\n","import React from 'react';\nimport Comment from '../Comments/Comments';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <div className=\"comments\">\n    <h2>Comments</h2>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n","import React from 'react';\nimport './PostItem.css';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\n\ntype Props = {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n};\n\nconst PostItem: React.FC<Props> = ({\n  title, body, user, comments,\n}) => (\n  <section className=\"post\">\n\n    <h2 className=\"post__title\">\n      {title[0].toUpperCase() + title.slice(1)}\n    </h2>\n\n    <User {...user} />\n\n    <article className=\"post__text\">\n      {body[0].toUpperCase() + body.slice(1)}\n    </article>\n\n    <CommentList comments={comments} />\n  </section>\n\n);\n\nexport default PostItem;\n","import React from 'react';\nimport './PostList.css';\nimport PostItem from '../PostItem/PostItem';\n\ntype Props = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <div className=\"container\">\n    {posts.map((post: PreparedPost) => (\n      <PostItem {...post} key={post.id} />\n    ))}\n  </div>\n);\n\nexport default PostList;\n","import React, { useState, ChangeEvent, useCallback } from 'react';\nimport { getPreparedPosts } from './helpers/api';\nimport { debounce } from './helpers/debounce';\nimport './App.css';\nimport Loading from './components/Loading/Loading';\nimport PostList from './components/PostList/PostList';\n\nconst App = () => {\n  const [isToggle, setIsToggle] = useState(false);\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const loadPosts = () => {\n    setIsToggle(!isToggle);\n    getPreparedPosts()\n      .then((postsFromServer: PreparedPost[]) => {\n        setPosts(postsFromServer);\n        setIsLoaded(true);\n      });\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 500), [],\n  );\n\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  const visiblePosts = posts.filter(({ title, body }) => (\n    (title + body).toLowerCase().includes(filterQuery.toLowerCase())\n  ));\n\n  return (\n    <div>\n      <h1>Dynamic list of posts</h1>\n\n      {!isToggle\n        ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={loadPosts}\n          >\n            Load\n          </button>\n        )\n        : (\n          <Loading isLoaded={isLoaded} />\n        )}\n\n      {isLoaded\n        && (\n          <>\n            <label\n              htmlFor=\"inputFilter\"\n              className=\"label\"\n            >\n              Filter field\n              <input\n                type=\"text\"\n                id=\"inputFilter\"\n                className=\"inputFilter\"\n                value={query}\n                onChange={handleOnChange}\n              />\n            </label>\n\n            <PostList posts={visiblePosts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","export const debounce = (f: React.Dispatch<React.SetStateAction<string>>, delay: number) => {\n  let timerId: ReturnType<typeof setTimeout>;\n\n  return (value: string) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      f(value);\n    }, delay);\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}